unit uFuncs;

interface
uses
  windows,sysutils,strutils,classes,uconfig,registry;
  function saveTofile(filename:string;p:pointer;dwSize:DWORD):boolean;
  function getFilename(workdir:string):string;overload;
  function getFilename(workdir:string;cap:string;ext:string):string;overload;
  function ReversePos(SubStr, S: String): Integer;
  function saveTofile2(filename:string;p:pointer;dwSize:DWORD):boolean;
  function gets(p:pointer;dwSize:DWORD):string;
  function getDataTimeString():string;overload;
  function getDataTimeString(dt:tdatetime):string;overload;
  function my_strtodatetime(str_datetime:string):tdatetime;
  procedure IEEmulator(VerCode: Integer);
  function WriteAppNameToReg: Boolean;
  function IsWin64: Boolean;
implementation
{
10001 (0x2711)	Internet Explorer 10。网页以IE 10的标准模式展现，页面!DOCTYPE无效
10000 (0x02710)	Internet Explorer 10。在IE 10标准模式中按照网页上!DOCTYPE指令来显示网页。Internet Explorer 10 默认值。
9999 (0x270F)	Windows Internet Explorer 9. 强制IE9显示，忽略!DOCTYPE指令
9000 (0x2328)	Internet Explorer 9. Internet Explorer 9默认值，在IE9标准模式中按照网页上!DOCTYPE指令来显示网页。
8888 (0x22B8)	Internet Explorer 8，强制IE8标准模式显示，忽略!DOCTYPE指令
8000 (0x1F40)	Internet Explorer 8默认设置，在IE8标准模式中按照网页上!DOCTYPE指令展示网页
7000 (0x1B58)	使用WebBrowser Control控件的应用程序所使用的默认值，在IE7标准模式中按照网页上!DOCTYPE指令来展示网页。
}
procedure IEEmulator(VerCode: Integer);
var
  RegObj: TRegistry;
begin
  RegObj := TRegistry.Create;
  try
    RegObj.RootKey := HKEY_CURRENT_USER;
    RegObj.Access := KEY_ALL_ACCESS;
    if not RegObj.OpenKey('\SOFTWARE\Microsoft\Internet ' +
        'Explorer\MAIN\FeatureControl\FEATURE_BROWSER_EMULATION', False) then exit;
    try
      RegObj.WriteInteger(ExtractFileName(ParamStr(0)), VerCode
        {10000 compatibility with IE10}); // for other versions read msdn

    finally
      RegObj.CloseKey;
    end;
  finally
    RegObj.Free;
  end;
end;
{--}
{需要注意是GetNativeSystemInfo 函数从Windows XP 开始才有，
 而 IsWow64Process 函数从 Windows XP with SP2 以及 Windows Server 2003 with SP1 开始才有。
 所以使用该函数的时候最好用GetProcAddress 。
}
function IsWin64: Boolean;
var
  Kernel32Handle: THandle;
  IsWow64Process: function(Handle: Windows.THandle; var Res: Windows.BOOL): Windows.BOOL; stdcall;
  GetNativeSystemInfo: procedure(var lpSystemInfo: TSystemInfo); stdcall;
  isWoW64: Bool;
  SystemInfo: TSystemInfo;
const
  PROCESSOR_ARCHITECTURE_AMD64 = 9;
  PROCESSOR_ARCHITECTURE_IA64 = 6;
begin
  Kernel32Handle := GetModuleHandle('KERNEL32.DLL');
  if Kernel32Handle = 0 then
    Kernel32Handle := LoadLibrary('KERNEL32.DLL');
  if Kernel32Handle <> 0 then
  begin
    IsWOW64Process := GetProcAddress(Kernel32Handle,'IsWow64Process');
    GetNativeSystemInfo := GetProcAddress(Kernel32Handle,'GetNativeSystemInfo');
    if Assigned(IsWow64Process) then
    begin
      IsWow64Process(GetCurrentProcess,isWoW64);
      Result := isWoW64 and Assigned(GetNativeSystemInfo);
      if Result then
      begin
        GetNativeSystemInfo(SystemInfo);
        Result := (SystemInfo.wProcessorArchitecture = PROCESSOR_ARCHITECTURE_AMD64) or
                  (SystemInfo.wProcessorArchitecture = PROCESSOR_ARCHITECTURE_IA64);
      end;
    end
    else Result := False;
  end
  else Result := False;
end;
{--}
function WriteAppNameToReg: Boolean;
var
  reg :TRegistry;
  sPath,sAppName:String;
begin
  Result := True;
  reg := TRegistry.Create;
  try
    reg.RootKey := HKEY_LOCAL_MACHINE;
    sPath := 'SOFTWARE\Microsoft\Internet Explorer\MAIN\FeatureControl\FEATURE_BROWSER_EMULATION';
    if isWin64 then
      sPath := 'SOFTWARE\Wow6432Node\Microsoft\Internet Explorer\MAIN\FeatureControl\FEATURE_BROWSER_EMULATION';
    if reg.OpenKey(sPath,True) then
    begin
      sAppName := ExtractFileName(ParamStr(0));
     if not reg.ValueExists(sAppName) then
        reg.WriteInteger(sAppName,0);
    end;
    reg.CloseKey;
  finally
    FreeAndNil(reg);
  end;
end;
function my_strtodatetime(str_datetime:string):tdatetime;
var
  fmt: TFormatSettings;
  str_sep,sys_sep,tmp_str:string;
begin
  GetLocaleFormatSettings(GetThreadLocale, fmt);
  str_sep:=midstr(str_datetime,5,1);
  sys_sep:=fmt.DateSeparator;
  tmp_str:=replacestr(str_datetime,str_sep,sys_sep);
  result:=strtodatetime(tmp_str);
end;
function getDataTimeString(dt:tdatetime):string;
var
  s:string;
begin
  result:=FormatDateTime('yyyy-mm-dd hh:nn:ss',dt);
end;
function getDataTimeString():string;
var
  s:string;
begin
  result:=FormatDateTime('yyyy-mm-dd hh:nn:ss',now());
end;
function gets(p:pointer;dwSize:DWORD):string;
var
  ms:TMemoryStream;
  ss:tstrings;
begin
  result:='';
  if(debug)then exit;

  ms := TMemoryStream.Create;
  ss:=tstringlist.Create;
  ms.Write(p^,dwSize);
  ms.Position:=0;
  try
  ss.LoadFromStream(ms,tEncoding.UTF8);
  result:=ss.Text;
  except
    result:='';
  end;
  ss.Free;
  ms.Free;

end;
function saveTofile2(filename:string;p:pointer;dwSize:DWORD):boolean;
var
  ss:tstrings;
  s:string;
begin
  ss:=tstringlist.Create;
  //setlength(s,dwSize);
  //copymemory(@s[1],p,dwSize);
  ss.Text:=pchar(p);
  ss.SaveToFile(filename,Tencoding.UTF8);
  ss.Free;
end;
function saveTofile(filename:string;p:pointer;dwSize:DWORD):boolean;
var
  hFile:cardinal;
  num:DWORD;
begin
  result:=false;
   hFile := CreateFile(pchar(filename), GENERIC_WRITE, FILE_SHARE_WRITE, nil, CREATE_ALWAYS, 0, 0);
    if (hFile = INVALID_HANDLE_VALUE)then  exit;
  result:=WriteFile(hFile,p^,dwSize,num,nil);
  closehandle(hFile);
end;
function getFilename(workdir:string;cap:string;ext:string):string;
var
  i:integer;
begin
  randomize();
  i:=random(10);
  result:=workdir+'\'+cap+FormatDateTime('yyyymmddhhnnsszzz',now())+inttostr(i)+ext;
end;
function ReversePos(SubStr, S: String): Integer;
var
  i : Integer;
begin
  i := Pos(ReverseString(SubStr), ReverseString(S));
  if i > 0 then i := Length(S) - i - Length(SubStr) + 2;
  Result := i;
end;
function getFilename(workdir:string):string;
var
  i:integer;
begin
  randomize();
  i:=random(10);
  result:=workdir+'\'+FormatDateTime('yyyymmddhhnnsszzz',now())+inttostr(i)+'.txt';
end;

end.
